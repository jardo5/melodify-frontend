name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build the Angular app
        run: npm run build --prod

      - name: Configure AWS Credentials Action for GitHub Actions
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Amazon ECR "Login" Action for GitHub Actions
        uses: aws-actions/amazon-ecr-login@v2.0.1     
        with:
          mask-password: 'true'

      - name: Set IMAGE_TAG
        id: tag
        run: echo "IMAGE_TAG=${{ github.sha }}-$(date +%s)" | tee -a $GITHUB_ENV

      - name: Build and push Docker image for ARM64
        run: |
          docker buildx create --use
          docker buildx build --platform linux/arm64 --cache-from=type=registry,ref=${{ secrets.ECR_REPOSITORY_URI }}:cache \
            --cache-to=type=registry,ref=${{ secrets.ECR_REPOSITORY_URI }}:cache --push -t "${{ secrets.ECR_REPOSITORY_URI }}:${IMAGE_TAG}" .

      - name: Update ECS service to use the new image
        run: |
          ecs_task_definition=$(aws ecs describe-task-definition --task-definition melodify-task)
          new_task_definition=$(echo $ecs_task_definition | jq --arg IMAGE_TAG "${IMAGE_TAG}" '.taskDefinition | .containerDefinitions[0].image="${{ secrets.ECR_REPOSITORY_URI }}:${IMAGE_TAG}"')
          new_task_definition=$(echo $new_task_definition | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
          aws ecs register-task-definition --cli-input-json "$new_task_definition"
          new_revision=$(aws ecs describe-task-definition --task-definition melodify-task | jq -r '.taskDefinition.taskDefinitionArn')
          aws ecs update-service --cluster melodify --service melodify-frontend-service --task-definition $new_revision --force-new-deployment
